import { CallbackQuery, Message } from "node-telegram-bot-api";
import { adminBot } from "."
import { prisma } from "./lib/prisma";


const adminBotFunction = () => {
  adminBot.onText(/\/start/, async (msg: Message) => {

    await adminBot.setMyCommands([

      { command: "/start", description: "–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É" },

    ]);

    const chatId = msg.chat.id;

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –≤–æ–¥—ñ—ó–≤
    const drivers = await prisma.driver.findMany();

    if (!drivers.length) {
      await adminBot.sendMessage(chatId, "üö´ –í–æ–¥—ñ—ó–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.");
      return;
    }

    // –§–æ—Ä–º—É—î–º–æ callback-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –Ω–æ–º–µ—Ä–∞–º–∏ –∞–≤—Ç–æ
    const keyboard = {
      reply_markup: {
        inline_keyboard: drivers.map((driver) => [
          {
            text: driver.carNumber,
            callback_data: `driver_${driver.id}`,
          },
        ]),
      },
    };

    await adminBot.sendMessage(chatId, "üöò –û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ:", keyboard);
  });

  // –û–±—Ä–æ–±–∫–∞ callback –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
  adminBot.on("callback_query", async (query: CallbackQuery) => {
    
    const chatId = query.message?.chat.id;
    const data = query.data;

    if (!chatId || !data) return;

    // ‚úÖ –Ø–∫—â–æ –≤–∏–±—Ä–∞–ª–∏ –∞–≤—Ç–æ
    if (data.startsWith("driver_")) {
      const driverId = parseInt(data.replace("driver_", ""));
      const driver = await prisma.driver.findUnique({
        where: { id: driverId },
      });

      if (driver) {
        await adminBot.sendMessage(
          chatId,
          `‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∞–≤—Ç–æ: ${driver.carNumber}\nüìä –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: "üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data: `stats_week_${driverId}` },
                  { text: "üóìÔ∏è –ú—ñ—Å—è—Ü—å", callback_data: `stats_month_${driverId}` },
                  { text: "üìä –í–µ—Å—å –ø–µ—Ä—ñ–æ–¥", callback_data: `stats_all_${driverId}` },
                ],
              ],
            },
          }
        );
      } else {
        await adminBot.sendMessage(chatId, "‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      }
    }

    // ‚úÖ –Ø–∫—â–æ –≤–∏–±—Ä–∞–ª–∏ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (data.startsWith("stats_")) {
      const [_, period, driverIdStr] = data.split("_");
      const driverId = parseInt(driverIdStr);

      let fromDate: Date | undefined;
      const now = new Date();

      if (period === "week") {
        fromDate = new Date(now);
        fromDate.setDate(now.getDate() - 7);
      } else if (period === "month") {
        fromDate = new Date(now);
        fromDate.setMonth(now.getMonth() - 1);
      }

      const driver = await prisma.driver.findUnique({
        where: { id: driverId }
      });
      
      const records = await prisma.fuelRecord.findMany({
        where: {
          driverId,
          ...(fromDate ? { date: { gte: fromDate } } : {}),
        },
        orderBy: { date: "asc" },
      });

      if (!records.length) {
        await adminBot.sendMessage(chatId, "üö´ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.");
        return;
      }

      // ‚úÖ –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const liters = records.reduce((sum, r) => sum + r.volume, 0);
      const cost = records.reduce((sum, r) => sum + r.total, 0);

      const firstOdo = records[0].odometr ?? 0;
      const lastOdo = records[records.length - 1].odometr ?? firstOdo;
      const distance = Number(lastOdo) - Number(firstOdo);

      const costPerKm = distance > 0 ? cost / distance : 0;
      const consumption = distance > 0 ? (liters / distance) * 100 : 0;

      // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await adminBot.sendMessage(
        chatId,
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (${period === "week" ? "–¢–∏–∂–¥–µ–Ω—å" : period === "month" ? "–ú—ñ—Å—è—Ü—å" : "–í–µ—Å—å –ø–µ—Ä—ñ–æ–¥"})  

üöó –ê–≤—Ç–æ: ${driver?.carNumber}
üõ¢Ô∏è –í–∏—Ç—Ä–∞—á–µ–Ω–æ –ø–∞–ª–∏–≤–∞: ${liters.toFixed(2)} –ª  
üí∏ –í–∏—Ç—Ä–∞—Ç–∏: ${cost.toFixed(2)} –≥—Ä–Ω  
üìè –ü—Ä–æ–±—ñ–≥: ${distance} –∫–º  
‚ö°Ô∏è –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ 1 –∫–º: ${costPerKm.toFixed(2)} –≥—Ä–Ω/–∫–º  
‚õΩÔ∏è –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: ${consumption.toFixed(2)} –ª/100 –∫–º
`,
{
  reply_markup: {
    inline_keyboard: [
      [{ text: "üìä –í–∏–≤–µ—Å—Ç–∏ —É CSV", callback_data: `export_csv_${period}_${driverId}` }]
    ]
  }
}
      );
    }

    
  });
};


export {
    adminBotFunction
}
