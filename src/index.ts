import TelegramBot, { Message } from "node-telegram-bot-api";
import { prisma } from "@/lib/prisma";

const token = process.env.TELEGRAM_BOT_TOKEN as string;
const loggertoken = process.env.TELEGRAM_LOGGER_BOT_TOKEN as string;
const bot = new TelegramBot(token, { polling: true });
const loggerBot = new TelegramBot(loggertoken, { polling: true });

interface UserData {
  step: number;
  phone?: string;
  carNumber?: string;
  tankVolume?: number;
}

const users: Record<number, UserData> = {};

const createDriver = async (chatId: number) => {
  const user = users[chatId];

  if (!user || !user.phone || !user.carNumber) {
    throw new Error("–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ–¥—ñ—è");
  }

  const driver = await prisma.driver.create({
    data: {
      phone: user.phone,
      carNumber: user.carNumber,
      tankVolume: user.tankVolume
    },
  });

  loggerBot.sendMessage("Driver created:", driver);
  return driver;
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  users[chatId] = { step: 1 };

  bot.sendMessage(chatId, "–ü—Ä–∏–≤—ñ—Ç! –î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", {
    reply_markup: {
      keyboard: [[{ text: "üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact: true }]],
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });
});

bot.on("contact", (msg: Message) => {
  const chatId = msg.chat.id;

  if (!users[chatId]) return;

  users[chatId].phone = msg.contact?.phone_number || "";
  users[chatId].step = 2;

  bot.sendMessage(chatId, "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ:");
});

bot.on("message", async (msg: Message) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!users[chatId]) return;

  const user = users[chatId];

  if (user.step === 2 && text) {
    user.carNumber = text;
    user.step = 3;
    bot.sendMessage(chatId, "–ß—É–¥–æ–≤–æ! –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∞–ª—å–Ω–∏–π –æ–±‚Äô—î–º –≤–∞—à–æ–≥–æ –±–∞–∫–∞ (–≤ –ª—ñ—Ç—Ä–∞—Ö):");
  } else if (user.step === 3 && text) {
    const volume = Number(text);
    if (isNaN(volume)) {
      bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–æ–±‚Äô—î–º –±–∞–∫–∞ –≤ –ª—ñ—Ç—Ä–∞—Ö).");
      return;
    }
    user.tankVolume = volume;
    user.step = 4;

    const driver = await createDriver(chatId);

    if (driver) {
      bot.sendMessage(
        chatId,
        `‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone}\nüöò –ê–≤—Ç–æ: ${driver.carNumber}\n‚õΩ –ë–∞–∫: ${driver.tankVolume} –ª\n\n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –≤–∞—à—ñ –∑–∞–ø—Ä–∞–≤–∫–∏.`
      );
    } else {
      bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, —Å–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
        reply_markup: {
          keyboard: [
            [{ text: "/start" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      });
    }
    

  }
});

export {
  bot,
  loggerBot
}
