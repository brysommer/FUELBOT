import { writeFileSync } from "fs";
import { format } from "date-fns";
import { Parser } from "json2csv";
import { adminBot } from "."; 
import { prisma } from "./lib/prisma";
import { CallbackQuery } from "node-telegram-bot-api";



const exportcsv = async () => {
  
  //—Ç—É—Ç —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ –∫–æ–ª–±–µ–∫ —Ç–∞–∫–æ–∂ —ñ–¥ –≤–æ–¥—ñ—è –¢–ó

  // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
  adminBot.on("callback_query", async (query: CallbackQuery) => {
    const data = query.data;

    const queryData = data?.split("_")

    

    const driverId = Number(queryData?.[3]);
    
    const period = queryData?.[2];
    

    if (data?.startsWith("export_csv")) {
      console.log("IDIDIDIDIID" + queryData)
      
      const chatId = query.message?.chat.id;

      if (!chatId) return;
      
      // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —Ü—å–æ–≥–æ –≤–æ–¥—ñ—è
      const driver = await prisma.driver.findUnique({
        where: { id: driverId },
      });

      if (!driver) {
        await adminBot.sendMessage(chatId, "‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        return;
      }

      let fromDate: Date | undefined;
      const now = new Date();

      if (period === "week") {
        fromDate = new Date(now);
        fromDate.setDate(now.getDate() - 7);
      } else if (period === "month") {
        fromDate = new Date(now);
        fromDate.setMonth(now.getMonth() - 1);
      }

      const records = await prisma.fuelRecord.findMany({
        where: {
          driverId,
          ...(fromDate ? { date: { gte: fromDate } } : {}),
        },
        orderBy: { date: "asc" },
      });

      if (!records.length) {
        await adminBot.sendMessage(chatId, "üìÇ –î–∞–Ω–∏—Ö —â–µ –Ω–µ–º–∞—î.");
        return;
      }

      const data = records.map((r, i, arr) => {
        const prevOdometr = i > 0 ? arr[i - 1].odometr ?? 0 : 0;
        const currentOdometr = r.odometr ?? 0;
        const distance = Number(currentOdometr) - Number(prevOdometr);
      
        return {
          –¥–∞—Ç–∞: format(new Date(r.date), "dd.MM.yyyy"),
          "–ü–æ—á–∞—Ç–∫–æ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞": prevOdometr.toString(),
          "–ö—ñ–Ω—Ü–µ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞": currentOdometr.toString(),
          "–ü—Ä–æ–±—ñ–≥": distance >= 0 ? distance.toString() : "-",
          "–¶—ñ–Ω–∞ –±–µ–Ω–∑–∏–Ω–∞, –≥—Ä–Ω.": r.price,
          "–í–∏—Ç—Ä–∞—Ç–∏, –≥—Ä–Ω.": r.total,
          "–í–∏—Ç—Ä–∞—Ç–∏, –ª.": r.volume,
          "–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª.": r.volume,
          "–ö–æ–º–µ–Ω—Ç–∞—Ä": r.comment ?? "",
        };
      });
      

      const parser = new Parser({ delimiter: ";" });
      const csv = parser.parse(data);

      const filePath = "./tmp/fuel_report.csv";
      writeFileSync(filePath, "\uFEFF" + csv, "utf8");

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–∞–π–ª
      await adminBot.sendDocument(chatId, filePath, {
        caption: "üìä –í–∞—à—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV",
      });
    }
  });

}

export {

  exportcsv

}
