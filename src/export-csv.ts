import { writeFileSync } from 'fs';
import { format } from 'date-fns';
import { Parser } from 'json2csv';
import { adminBot } from '.';
import { prisma } from './lib/prisma';
import { CallbackQuery } from 'node-telegram-bot-api';
import { FuelRecord, Shift } from '@prisma/client';

const exportcsv = async () => {
    //—Ç—É—Ç —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ –∫–æ–ª–±–µ–∫ —Ç–∞–∫–æ–∂ —ñ–¥ –≤–æ–¥—ñ—è –¢–ó

    // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
    adminBot.on('callback_query', async (query: CallbackQuery) => {
        const data = query.data;

        const queryData = data?.split('_');

        const driverId = Number(queryData?.[3]);

        const period = queryData?.[2];

        if (data?.startsWith('export_csv')) {
            console.log('IDIDIDIDIID' + queryData);

            const chatId = query.message?.chat.id;

            if (!chatId) return;

            // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —Ü—å–æ–≥–æ –≤–æ–¥—ñ—è
            const driver = await prisma.driver.findUnique({
                where: { id: driverId },
            });

            if (!driver) {
                await adminBot.sendMessage(chatId, '‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
                return;
            }

            let fromDate: Date | undefined;
            const now = new Date();

            if (period === 'week') {
                fromDate = new Date(now);
                fromDate.setDate(now.getDate() - 7);
            } else if (period === 'month') {
                fromDate = new Date(now);
                fromDate.setMonth(now.getMonth() - 1);
            }

            const fillUps = await prisma.fuelRecord.findMany({
                where: {
                    driverId,
                    ...(fromDate ? { date: { gte: fromDate } } : {}),
                },
                orderBy: { date: 'asc' },
            });

            const days = await prisma.shift.findMany({
                where: { driverId, ...(fromDate ? { startedAt: { gte: fromDate } } : {}) },
                orderBy: { startedAt: 'asc' },
            });

            // –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö —É —Å–ø—ñ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            const dayEvents = days.map((s) => ({
                type: 'shift',
                id: s.id,
                date: s.startedAt,
                odometerStart: s.odometerStart,
                data: s,
            }));

            const fuelEvents = fillUps.map((f) => ({
                type: 'fuel',
                id: f.id,
                date: f.date,
                odometerStart: f.odometr,
                data: f,
            }));

            // –æ–±'—î–¥–Ω—É—î–º–æ —ñ —Å–æ—Ä—Ç—É—î–º–æ

            if (!dayEvents.length) {
                await adminBot.sendMessage(chatId, 'üìÇ –î–∞–Ω–∏—Ö —â–µ –Ω–µ–º–∞—î.');
                return;
            }

            interface FuelEvent {
                type: string;
                id: number;
                date: Date;
                odometerStart: bigint | null;
                data: FuelRecord;
            }

            interface ShiftEvent {
                type: string;
                id: number;
                date: Date;
                odometerStart: bigint | null;
                data: Shift;
            }

            const dataFillups = fuelEvents.map((r: FuelEvent, i: number, arr: FuelEvent[]) => {
                const currentOdometr = r.odometerStart ?? 0;

                return {
                    rawDate: new Date(r.date),
                    –¥–∞—Ç–∞: format(new Date(r.date), 'dd.MM.yyyy'),
                    '–ü–æ—á–∞—Ç–∫–æ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞': currentOdometr,
                    '–ö—ñ–Ω—Ü–µ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞': 'no Data',
                    –ü—Ä–æ–±—ñ–≥: 'no Data',
                    '–¶—ñ–Ω–∞ –±–µ–Ω–∑–∏–Ω–∞, –≥—Ä–Ω.': r.data.price,
                    '–í–∏—Ç—Ä–∞—Ç–∏, –≥—Ä–Ω.': r.data.total,
                    '–í–∏—Ç—Ä–∞—Ç–∏, –ª.': 'no Data',
                    '–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª.': r.data.volume,
                    –ö–æ–º–µ–Ω—Ç–∞—Ä: 'no Data',
                };
            });

            const dataDays = dayEvents.map((r: ShiftEvent, i: number, arr: ShiftEvent[]) => {
                const currentOdometr = r.odometerStart ?? 0;

                return {
                    rawDate: new Date(r.date),
                    –¥–∞—Ç–∞: format(new Date(r.date), 'dd.MM.yyyy'),
                    '–ü–æ—á–∞—Ç–∫–æ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞': currentOdometr,
                    '–ö—ñ–Ω—Ü–µ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞': r.data.odometerEnd,
                    –ü—Ä–æ–±—ñ–≥: r.data.distance,
                    '–¶—ñ–Ω–∞ –±–µ–Ω–∑–∏–Ω–∞, –≥—Ä–Ω.': 'no Data',
                    '–í–∏—Ç—Ä–∞—Ç–∏, –≥—Ä–Ω.': 'no Data',
                    '–í–∏—Ç—Ä–∞—Ç–∏, –ª.': r.data.fuelConsumed,
                    '–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª.': 'no Data',
                    –ö–æ–º–µ–Ω—Ç–∞—Ä: r.data.report,
                };
            });

            const recordSorted = [...dataFillups, ...dataDays].sort(
                (a, b) => a.rawDate.getTime() - b.rawDate.getTime(),
            );

            type RecordRow = {
                rawDate: Date;
                –¥–∞—Ç–∞: string;
                '–ü–æ—á–∞—Ç–∫–æ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞': number | bigint | string | null;
                '–ö—ñ–Ω—Ü–µ–≤—ñ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞': number | bigint | string | null;
                –ü—Ä–æ–±—ñ–≥: number | string | null;
                '–¶—ñ–Ω–∞ –±–µ–Ω–∑–∏–Ω–∞, –≥—Ä–Ω.': number | string | null;
                '–í–∏—Ç—Ä–∞—Ç–∏, –≥—Ä–Ω.': number | string | null;
                '–í–∏—Ç—Ä–∞—Ç–∏, –ª.': number | string | null;
                '–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª.': number | string | null;
                –ö–æ–º–µ–Ω—Ç–∞—Ä: string | null;
                '–í –±–∞–∫—É'?: number; // –Ω–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞
            };

            const addTankColumn = (records: RecordRow[]) => {
                let tank = 0;
                return records.map((r) => {
                    const used = typeof r['–í–∏—Ç—Ä–∞—Ç–∏, –ª.'] === 'number' ? r['–í–∏—Ç—Ä–∞—Ç–∏, –ª.'] : null;
                    const filled =
                        typeof r['–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª.'] === 'number' ? r['–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ, –ª.'] : null;

                    if (used !== null) {
                        tank -= used; // –≤–∏—Ç—Ä–∞—Ç–∏ -> –º—ñ–Ω—É—Å
                    }
                    if (filled !== null) {
                        tank += filled; // –∑–∞–ø—Ä–∞–≤–∫–∞ -> –ø–ª—é—Å
                    }

                    return { ...r, '–í –±–∞–∫—É': tank };
                });
            };

            const balance = addTankColumn(recordSorted);

            const parser = new Parser({ delimiter: ';' });
            const csv = parser.parse(balance);

            const filePath = './tmp/fuel_report.csv';
            writeFileSync(filePath, '\uFEFF' + csv, 'utf8');

            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–∞–π–ª
            await adminBot.sendDocument(chatId, filePath, {
                caption: 'üìä –í–∞—à—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV',
            });
        }
    });
};

export { exportcsv };
