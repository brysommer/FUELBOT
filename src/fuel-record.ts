import { Message } from "node-telegram-bot-api";
import { bot, loggerChat } from ".";
import { loggerBot } from ".";
import { prisma } from "./lib/prisma"

const delay = (duration: number) => {
  return new Promise<void>((resolve) => {
    setTimeout(resolve, duration);
  });
};

const fuelRecord = () => {
	bot.onText(/\/zapravka/, async (msg) => {  

		const chatId = msg.chat.id;
	  
		const driver = await prisma.driver.findUnique({
		  where: { chatId: BigInt(chatId) }
		});
	  
		if (!driver) {
			return bot.sendMessage(chatId, "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É /start.");
		  }

		  if (driver.step === 0) {

			// –ö—Ä–æ–∫ 1: –æ–±—Å—è–≥
			await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –æ–±—Å—è–≥ –∑–∞–ø—Ä–∞–≤–∫–∏ (–ª—ñ—Ç—Ä–∏):");
			await prisma.driver.update({
				where: { id: driver.id },
				data: { step: 1 }
			});
			return;
		  }
	});

  	bot.on("message", async (msg: Message) => {
    	const chatId = msg.chat.id;
    	const text = msg.text;

    	const driver = await prisma.driver.findUnique({
      		where: { chatId: BigInt(chatId) }
   		});

    	if (text === "–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è") {

      		if (!driver) {
        		return bot.sendMessage(chatId, "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É /start.");
      		}

      		if (driver.step === 0) {

				// –ö—Ä–æ–∫ 1: –æ–±—Å—è–≥
				await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –æ–±—Å—è–≥ –∑–∞–ø—Ä–∞–≤–∫–∏ (–ª—ñ—Ç—Ä–∏):");
				await prisma.driver.update({
					where: { id: driver.id },
					data: { step: 1 }
				});
				return;
      		}
    	}

		// === –ö–†–û–ö 1: –û–ë–°–Ø–ì ===
		if (driver?.step === 1 && text) {

			const volume = parseFloat(text);

			if (isNaN(volume)) {
				return bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–ª—ñ—Ç—Ä–∏).");
			}

			// —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∑–∞–ø–∏—Å
			await prisma.fuelRecord.create({
				data: {
					driverId: driver.id,
					volume,
					price: 0,
					total: 0,
				}
			});

			await prisma.driver.update({
				where: { id: driver.id },
				data: { step: 2 }
			});

			await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –ª—ñ—Ç—Ä:");
			return;
		}

		// === –ö–†–û–ö 2: –¶–Ü–ù–ê ===
		if (driver?.step === 2 && text) {
			const price = parseFloat(text);
			if (isNaN(price)) {
				return bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≥—Ä–Ω/–ª).");
			}

			const record = await prisma.fuelRecord.findFirst({
				where: { driverId: driver.id, price: 0 },
				orderBy: { createdAt: "desc" }
			});

			if (!record) {
				return bot.sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
			}

			const total = record.volume * price;

			await prisma.fuelRecord.update({
				where: { id: record.id },
				data: { price, total }
			});

			await prisma.driver.update({
				where: { id: driver.id },
				data: { step: 3 } // –Ω–æ–≤–∏–π –∫—Ä–æ–∫
			});

			await bot.sendMessage(chatId, "–î–æ–¥–∞–π—Ç–µ –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞ (–∫–º):");
			return;
		};

		// === –ö–†–û–ö 3: –û–î–û–ú–ï–¢–† ===
		if (driver?.step === 3 && text) {

			const odometr = parseInt(text);
			
			if (isNaN(odometr)) {
				return bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–æ–¥–æ–º–µ—Ç—Ä).");
			}

			const record = await prisma.fuelRecord.findFirst({
				where: { driverId: driver.id, odometr: null },
				orderBy: { createdAt: "desc" }
			});

			if (!record) {
				return bot.sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
			}

			const updated = await prisma.fuelRecord.update({
				where: { id: record.id },
				data: { odometr }
			});

			await prisma.driver.update({
				where: { id: driver.id },
				data: { step: 4 }
			});

			await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–ø—Ä–∞–≤–∫–∏");
			return;

		};

			// === –ö–†–û–ö 4: –ö–û–ú–ï–ù–¢–ê–† ===
		if (driver?.step === 4 && text) {

			const record = await prisma.fuelRecord.findFirst({
				where: { driverId: driver.id, comment: null },
				orderBy: { createdAt: "desc" }
			});

			if (!record) {
				return bot.sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
			}

			const updated = await prisma.fuelRecord.update({
				where: { id: record.id },
				data: { comment: text }
			});

			await prisma.driver.update({
				where: { id: driver.id },
				data: { step: 0 } // –ó–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
			});

  			bot.sendMessage(chatId, 
    `‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞!  
üõ¢Ô∏è ${updated.volume} –ª –ø–æ ${updated.price} –≥—Ä–Ω/–ª  
üìç –û–¥–æ–º–µ—Ç—Ä: ${updated.odometr} –∫–º  
üí∏ –°—É–º–∞: ${updated.total} –≥—Ä–Ω
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${updated.comment ?? "–Ω–µ–º–∞—î"}
`
);
			await delay(1000);
    
    		loggerBot.sendMessage(loggerChat,
`‚õΩÔ∏è –ù–æ–≤–∞ –∑–∞–ø—Ä–∞–≤–∫–∞!  
üöó –ê–≤—Ç–æ: ${driver.carNumber}  
üõ¢Ô∏è ${updated.volume} –ª –ø–æ üíµ ${updated.price} –≥—Ä–Ω/–ª  
üìç –û–¥–æ–º–µ—Ç—Ä: ${updated.odometr} –∫–º  
üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${updated.total} –≥—Ä–Ω
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${updated.comment ?? "–Ω–µ–º–∞—î"}
`
);
          
    		return bot.sendMessage(chatId, '–§–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä—É —Ç–∞ —á–µ–∫—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø—ñ—Å–ª—è –≤–Ω–µ—Å–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö',
				{
					reply_markup: {
						keyboard: [[{ text: "–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è" }]],
						resize_keyboard: true,
						one_time_keyboard: false
					}
				}
			);
		}
	});   
};

export { 

    fuelRecord

};



