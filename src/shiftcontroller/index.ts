import { prisma } from '../lib/prisma';
import { bot } from '..';
import { format } from 'date-fns';
import { delay, formattedDateUA } from '../helpers';

export const shiftChain = () => {
    bot.onText(/\/den/, async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        const driver = await prisma.driver.findUnique({
            where: { chatId: BigInt(chatId) },
        });

        if (driver) {
            const startOfDay = new Date();
            startOfDay.setHours(0, 0, 0, 0);

            const endOfDay = new Date();
            endOfDay.setHours(23, 59, 59, 999);

            const shift = await prisma.shift.findFirst({
                where: {
                    driverId: driver.id,
                    startedAt: {
                        gte: startOfDay,
                        lte: endOfDay,
                    },
                },
                orderBy: {
                    startedAt: 'desc', // –±–µ—Ä–µ –æ—Å—Ç–∞–Ω–Ω—é –∑–∞ —á–∞—Å–æ–º
                },
            });

            if (shift && !shift.endedAt) {
                bot.sendMessage(
                    chatId,
                    `–†–æ–±–æ—á–∏–π –¥–µ–Ω—å —Ä–æ–∑–ø–æ—á–∞—Ç–æ –æ ${formattedDateUA(shift.startedAt)}. –ù–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è ${
                        shift.odometerStart
                    }`,

                    {
                        reply_markup: {
                            keyboard: [[{ text: '–ö—ñ–Ω–µ—Ü—å –¥–Ω—è üèÅ' }, { text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                            one_time_keyboard: false,
                            resize_keyboard: true,
                        },
                    },
                );
            } else {
                const odometrStep = await prisma.driver.update({
                    where: {
                        id: driver.id,
                    },
                    data: {
                        step: 1991,
                    },
                });

                console.log(odometrStep);
                bot.sendMessage(
                    chatId,
                    `–í–≤–µ–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞.`,

                    {
                        reply_markup: {
                            keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                            one_time_keyboard: false,
                            resize_keyboard: true,
                        },
                    },
                );
            }
        }
    });
    bot.on('text', async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        const driver = await prisma.driver.findUnique({
            where: { chatId: BigInt(chatId) },
        });

        console.log(driver);

        if (text === '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†') return false;

        if (driver) {
            //comment
            if (driver.step === 1989) {
                if (!text) {
                    const endShiftOdo = await prisma.driver.update({
                        where: {
                            id: driver.id,
                        },
                        data: {
                            step: 0,
                        },
                    });

                    bot.sendMessage(chatId, `–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ. –ü–æ–≤–µ—Ä—Ç–∞—é –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é`, {
                        reply_markup: {
                            keyboard: [[{ text: '–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è' }, { text: '–†–æ–±–æ—á–∏–π –¥–µ–Ω—å ‚è≥' }]],
                            one_time_keyboard: false,
                            resize_keyboard: true,
                        },
                    });
                }
                const recentShift = await prisma.shift.findFirst({
                    where: {
                        driverId: driver.id,
                        report: null,
                    },
                    orderBy: {
                        startedAt: 'desc',
                    },
                });
                if (!recentShift) {
                    bot.sendMessage(
                        chatId,
                        `–£—Å—ñ –≤–∞—à—ñ –¥–Ω—ñ –≤–∂–µ –º—ñ—Å—Ç—è—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä. –ü–æ–≤–µ—Ä—Ç–∞—é –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é`,
                        {
                            reply_markup: {
                                keyboard: [[{ text: '–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è' }, { text: '–†–æ–±–æ—á–∏–π –¥–µ–Ω—å ‚è≥' }]],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        },
                    );
                    return;
                }
                const updateComment = await prisma.shift.update({
                    where: {
                        id: recentShift.id,
                    },
                    data: {
                        report: text,
                    },
                });
                if (recentShift?.id && text && updateComment) {
                    const endShiftOdo = await prisma.driver.update({
                        where: {
                            id: driver.id,
                        },
                        data: {
                            step: 0,
                        },
                    });
                    bot.sendMessage(chatId, `–ö–æ–º–µ–Ω—Ç–∞—Ä "${text}" –ø—Ä–∏–π–Ω—è—Ç–æ.`, {
                        reply_markup: {
                            keyboard: [[{ text: '–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è' }, { text: '–†–æ–±–æ—á–∏–π –¥–µ–Ω—å ‚è≥' }]],
                            one_time_keyboard: false,
                            resize_keyboard: true,
                        },
                    });
                    await delay(1000);
                    bot.sendMessage(
                        chatId,
                        `–ü–µ—Ä–µ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–∫–æ–Ω–∫—É "—Å–∫—Ä—ñ–ø–∫–∞", –æ–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥–∞–ª–µ—Ä–µ—ó —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º. –§–æ—Ç–æ –±—É–¥–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
                        {
                            reply_markup: {
                                keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        },
                    );
                } else {
                    bot.sendMessage(chatId, `–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞`, {
                        reply_markup: {
                            keyboard: [[{ text: '–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è' }, { text: '–†–æ–±–æ—á–∏–π –¥–µ–Ω—å ‚è≥' }]],
                            one_time_keyboard: false,
                            resize_keyboard: true,
                        },
                    });
                }
            }
            //start odo
            if (driver.step === 1991) {
                try {
                    const odometerStart = Number(text);

                    const newShift = await prisma.shift.create({
                        data: {
                            driverId: driver.id,
                            odometerStart,
                            startedAt: new Date(),
                        },
                    });

                    const endShiftOdo = await prisma.driver.update({
                        where: {
                            id: driver.id,
                        },
                        data: {
                            step: 0,
                        },
                    });

                    bot.sendMessage(
                        chatId,
                        `–†–æ–±–æ—á–∏–π –¥–µ–Ω—å —Ä–æ–∑–ø–æ—á–∞—Ç–æ, –ø–µ—Ä–µ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–∫–æ–Ω–∫—É "—Å–∫—Ä—ñ–ø–∫–∞", –æ–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥–∞–ª–µ—Ä–µ—ó —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º. –§–æ—Ç–æ –±—É–¥–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
                        {
                            reply_markup: {
                                keyboard: [
                                    [{ text: '–ö—ñ–Ω–µ—Ü—å –¥–Ω—è üèÅ' }, { text: '–ó–∞–ø—Ä–∞–≤–∫–∞‚õΩÔ∏è' }],
                                    [{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }],
                                ],
                                one_time_keyboard: true,
                                resize_keyboard: true,
                            },
                        },
                    );
                } catch (error) {
                    bot.sendMessage(
                        chatId,
                        `–í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —á–∏—Å–ª–æ —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É`,

                        {
                            reply_markup: {
                                keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        },
                    );
                }
            }
            //end odo
            if (driver.step === 1996) {
                try {
                    const odometerEnd = Number(text);

                    const driverID = driver.id;

                    if (odometerEnd) {
                        const activeShift = await prisma.shift.findFirst({
                            where: {
                                driverId: driver.id,
                                endedAt: null,
                            },
                            orderBy: {
                                startedAt: 'desc',
                            },
                        });

                        if (activeShift) {
                            const updatedShift = await prisma.shift.update({
                                where: {
                                    id: activeShift.id, // update –ø–æ—Ç—Ä–µ–±—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
                                },
                                data: {
                                    odometerEnd,
                                    endedAt: new Date(), // —Ç—É—Ç –ª–æ–≥—ñ—á–Ω—ñ—à–µ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –∑–º—ñ–Ω—É
                                },
                            });

                            if (updatedShift) {
                                const endShiftOdo = await prisma.driver.update({
                                    where: {
                                        id: driverID,
                                    },
                                    data: {
                                        step: 0,
                                    },
                                });

                                const durationHours = () => {
                                    if (updatedShift.endedAt && updatedShift.startedAt) {
                                        const durationMs =
                                            updatedShift?.endedAt?.getTime() -
                                            updatedShift.startedAt.getTime();
                                        return Number((durationMs / (1000 * 60 * 60)).toFixed(2));
                                    }

                                    return null;
                                };

                                const distance =
                                    updatedShift.odometerEnd && updatedShift.odometerStart
                                        ? Number(updatedShift.odometerEnd) -
                                          Number(updatedShift.odometerStart)
                                        : null;

                                const fuelNorm = await prisma.fuelNorm.findUnique({
                                    where: {
                                        driverId: driver.id,
                                    },
                                });

                                const fuelConsumed =
                                    distance && fuelNorm?.norm
                                        ? (fuelNorm.norm * distance) / 100
                                        : null;

                                const shiftUpdate = await prisma.shift.update({
                                    where: {
                                        id: updatedShift.id, // update –ø–æ—Ç—Ä–µ–±—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
                                    },
                                    data: {
                                        distance,
                                        fuelConsumed,
                                        durationHours: durationHours(),
                                    },
                                });

                                const waitingForComment = await prisma.driver.update({
                                    where: {
                                        id: driver.id,
                                    },
                                    data: {
                                        step: 1989,
                                    },
                                });

                                await bot.sendMessage(
                                    chatId,
                                    `‚úÖ –ó–º—ñ–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ

‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${shiftUpdate.durationHours?.toFixed(2)} –≥–æ–¥
üöó –ü—Ä–æ–±—ñ–≥: ${distance} –∫–º
‚õΩ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞–ª—å–Ω–æ–≥–æ: ${fuelConsumed?.toFixed(2)} –ª`,
                                );

                                await delay(500);

                                await bot.sendMessage(
                                    chatId,
                                    `–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º`,
                                );
                            } else {
                                bot.sendMessage(chatId, '–í—ñ–¥—Å—É—Ç–Ω—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥–Ω—ñ', {
                                    reply_markup: {
                                        keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                                        one_time_keyboard: false,
                                        resize_keyboard: true,
                                    },
                                });
                            }
                        }
                    } else {
                        bot.sendMessage(chatId, `–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑`, {
                            reply_markup: {
                                keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        });

                        return;
                    }
                } catch (error) {
                    bot.sendMessage(
                        chatId,
                        `–í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —á–∏—Å–ª–æ —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É`,

                        {
                            reply_markup: {
                                keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        },
                    );
                }
            }
            if (text === '–†–æ–±–æ—á–∏–π –¥–µ–Ω—å ‚è≥') {
                const startOfDay = new Date();
                startOfDay.setHours(0, 0, 0, 0);

                const endOfDay = new Date();
                endOfDay.setHours(23, 59, 59, 999);

                const shift = await prisma.shift.findFirst({
                    where: {
                        driverId: driver.id,
                        startedAt: {
                            gte: startOfDay,
                            lte: endOfDay,
                        },
                    },
                    orderBy: {
                        startedAt: 'desc', // –±–µ—Ä–µ –æ—Å—Ç–∞–Ω–Ω—é –∑–∞ —á–∞—Å–æ–º
                    },
                });

                console.log(shift);

                if (shift && !shift.endedAt) {
                    bot.sendMessage(
                        chatId,
                        `–†–æ–±–æ—á–∏–π –¥–µ–Ω—å —Ä–æ–∑–ø–æ—á–∞—Ç–æ –æ ${formattedDateUA(
                            shift.startedAt,
                        )}. –ù–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è ${shift.odometerStart}`,

                        {
                            reply_markup: {
                                keyboard: [
                                    [{ text: '–ö—ñ–Ω–µ—Ü—å –¥–Ω—è üèÅ' }, { text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }],
                                ],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        },
                    );
                } else {
                    const odometrStep = await prisma.driver.update({
                        where: {
                            id: driver.id,
                        },
                        data: {
                            step: 1991,
                        },
                    });

                    console.log(odometrStep);
                    bot.sendMessage(
                        chatId,
                        `–í–≤–µ–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞.`,

                        {
                            reply_markup: {
                                keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                                one_time_keyboard: false,
                                resize_keyboard: true,
                            },
                        },
                    );
                }
            }
            //deprecated
            if (text === '–ü–æ—á–∞—Ç–æ–∫ –¥–Ω—è ‚è±Ô∏è') {
                const odometrStep = await prisma.driver.update({
                    where: {
                        id: driver.id,
                    },
                    data: {
                        step: 1991,
                    },
                });

                console.log(odometrStep);
                bot.sendMessage(
                    chatId,
                    `–í–≤–µ–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞.`,

                    {
                        reply_markup: {
                            keyboard: [[{ text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†' }]],
                            one_time_keyboard: false,
                            resize_keyboard: true,
                        },
                    },
                );
            }

            if (text === '–ö—ñ–Ω–µ—Ü—å –¥–Ω—è üèÅ') {
                const endShiftOdo = await prisma.driver.update({
                    where: {
                        id: driver.id,
                    },
                    data: {
                        step: 1996,
                    },
                });
                bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞');
            }
        } else {
            //–≤–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        }
    });
};
